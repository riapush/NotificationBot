pipeline {
    agent any

    stages {
	stage('Stop old container') {
            steps {
		echo '===============stopping old container==================='
                script {
                    if (isUnix()) {
                        sh 'docker stop jenk_bot || true'
                    } else {
                        bat 'docker stop jenk_bot || echo off'
                    }
                }
		echo '===============old container successfully stopped==================='
            }
        }
	stage('Download git repository') {
            steps {
		echo '===============downloading git repo==================='
                script {
                    if (isUnix()) {
                        sh 'rm -rf api_lab2'
                        sh 'git clone --depth=1 https://github.com/riapush/NotificationBot.git'
                        sh 'rm -rf api_lab2/.git*'
                        sh 'ls'
                    } else {
                        bat 'powershell Remove-Item NotificationBot -Recurse -Force'
                        bat 'git clone --depth=1 https://github.com/riapush/NotificationBot.git NotificationBot'
                        bat 'powershell Remove-Item NotificationBot/.git* -Recurse -Force'
                    }
                }
		echo '===============git repo downloaded==================='
            }
        }
        stage('Getting env variables') {
            steps {
		echo '===============getting env variables==================='
                withCredentials([file(credentialsId: 'ENV', variable: 'ENV')]) {
                    script {
                        if (isUnix()) {
                            sh 'cp $ENV ./.env'
                            sh 'mkdir -p ./storage/backup'
                        } else {
                            bat 'powershell Copy-Item %ENV% -Destination ./.env'
                            bat 'If Not Exist storage\\backup mkdir storage\\backup'
                        }
                    }
                }
		echo '===============got variables succesfully==================='
            }
        }
stage("back-up") {
            steps {
                echo " ==============creating back-up=================="
                sh '''
                docker exec jenk_bot sh -c 'sqlite3 ./notifications.db .dump > dump.sql'
                docker exec jenk_bot sh -c 'tar -cvf backup.tar ./attachments'
                docker exec jenk_bot sh -c 'tar -rvf backup.tar dump.sql'
                docker exec jenk_bot sh -c 'gzip backup.tar'
                docker exec jenk_bot sh -c 'rm dump.sql'
                docker cp backup.tar.gz c:/users/valer/.jenkins/workspace/api_lab2/storage/backup
                docker exec bot sh -c 'rm backup.tar.gz'
                '''
		echo " ==============back-up created succesfully=================="
            }
        }
}
	post {
            success {
		echo '===============run docker==================='
                script {
                    if (isUnix()) {
                        sh 'docker build -t notificationbot .'
                        sh 'docker run --name jenk_bot -d --rm notificationbot'
                    } else {
                        bat 'docker build -t notificationbot .'
                        bat 'docker run --name jenk_bot -d --rm notificationbot'
                        bat 'If Not Exist storage/dump.sql powershell New-Item storage/dump.sql'
                    }
                }
		echo '===============docker container is running successfully==================='
            }
    }
}
